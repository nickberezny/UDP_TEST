///////////////////////////////////////////////////////////////////////////////
// Module1.cpp
#include "TcPch.h"
#pragma hdrstop

#include "Module1.h"
#include "Untitled1Version.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CModule1
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModule1
BEGIN_INTERFACE_MAP(CModule1)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
	INTERFACE_ENTRY(IID_ITcIoUdpProtocolRecv, ITcIoUdpProtocolRecv)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CModule1, VID_Untitled1, CID_Untitled1CModule1)
IMPLEMENT_ITCOMOBJECT(CModule1)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModule1)
IMPLEMENT_ITCADI(CModule1)
IMPLEMENT_ITCWATCHSOURCE(CModule1)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModule1 
BEGIN_SETOBJPARA_MAP(CModule1)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_Module1Parameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_Module1udpProt, m_spudpProt)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModule1 
BEGIN_GETOBJPARA_MAP(CModule1)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_Module1Parameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_Module1udpProt, m_spudpProt)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModule1
BEGIN_OBJPARAWATCH_MAP(CModule1)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModule1
BEGIN_OBJDATAAREA_MAP(CModule1)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_Module1Inputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_Module1Outputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CModule1::CModule1()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, m_counter(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CModule1::~CModule1() 
{
}

void reverseBits(int32_t* num)
{
	int32_t temp[4];
	temp[0] = (*num & 0xff000000) >> 24;
	temp[1] = (*num & 0x00ff0000) >> 8;
	temp[2] = (*num & 0x0000ff00) << 8;
	temp[3] = (*num & 0x000000ff) << 24;
	*num = temp[0] | temp[1] | temp[2] | temp[3];

}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModule1)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModule1::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code
		
	m_Trace.Log(tlVerbose, FLEAVEA "HELLO!");
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModule1::SetObjStateSO()
{

	
	HRESULT hr = S_OK;
	
	//START EDITING
	if (SUCCEEDED(hr) && m_spudpProt.HasOID())
	{
		m_Trace.Log(tlInfo, FLEAVEA "Register UdpProt");
		if (SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spudpProt)))
		{
			m_Trace.Log(tlInfo, FLEAVEA "Server: UdpProt listen to Port: %d", 57219);
			if (FAILED(hr = m_spudpProt->RegisterReceiver(57219,
				THIS_CAST(ITcIoUdpProtocolRecv))))
			{
				m_Trace.Log(tlError, FLEAVEA "Server: UdpProtRegisterReceiver failed on Port: %d", 57219);
				m_spudpProt = NULL;
			}
		}
	}

	HRESULT hr2 = S_OK;
	uint64_t dataToSend = 0x43003412; //set bias 
	hr2 = m_spudpProt->SendData(3232235787, 10547, 57219, 8, &dataToSend, false);
	
	// If following call is successful the CycleUpdate method will be called,
		// eventually even before method has been left.
		hr = FAILED(hr) ? hr : AddModuleToCaller();
	// Cleanup if transition failed at some stage
	if (FAILED(hr))
	{
		if (m_spudpProt != NULL)
			m_spudpProt->UnregisterReceiver(57219);
		m_spudpProt = NULL;
		RemoveModuleFromCaller();
	}
	//END EDITING

	//Setup Force Sensor
	dataToSend = 0x02003412; //start stream
	hr2 = m_spudpProt->SendData(3232235787, 10547, 57219, 8, &dataToSend, false);

	m_Trace.Log(tlVerbose, FLEAVEA "bias hr=0x%08x", hr2);
	
	return hr;

}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModule1::SetObjStateOS()
{

	uint64_t dataToSend = 0x00003412; //stop stream
	m_spudpProt->SendData(3232235787, 10547, 57219, 8, &dataToSend, false);


	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	if (m_spudpProt != NULL)
		m_spudpProt->UnregisterReceiver(57219);
	m_spudpProt = NULL;
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModule1::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModule1::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	m_counter+=m_Inputs.Value;
	m_Outputs.Value=m_counter;
	m_spudpProt->CheckReceived();
	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CModule1::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModule1::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}


///<AutoGeneratedContent id="ImplementationOf_ITcIoUdpProtocolRecv">
HRESULT CModule1::ReceiveData(ULONG ipAddr, USHORT udpDestPort, USHORT udpSrcPort, ULONG nData, PVOID pData, ETYPE_VLAN_HEADER* pVlan)
{
	HRESULT hr = S_OK;
	int32_t* fdata = static_cast<int32_t*>(pData);

	reverseBits(&fdata[0]);
	reverseBits(&fdata[1]);
	reverseBits(&fdata[2]);
	reverseBits(&fdata[3]);
	reverseBits(&fdata[4]);
	reverseBits(&fdata[5]);
	reverseBits(&fdata[6]);
	reverseBits(&fdata[7]);
	reverseBits(&fdata[8]);

	m_Outputs.count = (double)fdata[1];
	m_Outputs.F1 = (double)fdata[3] / 1000000.0;
	m_Outputs.F2 = (double)fdata[4] / 1000000.0;
	m_Outputs.F3 = (double)fdata[5] / 1000000.0;
	m_Outputs.T1 = (double)fdata[6] / 1000000.0;
	m_Outputs.T2 = (double)fdata[7] / 1000000.0;
	m_Outputs.T3 = (double)fdata[8] / 1000000.0;

	return hr;
}
///</AutoGeneratedContent>
